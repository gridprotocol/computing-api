// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: compute.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ComputeService_Greet_FullMethodName   = "/compute.ComputeService/Greet"
	ComputeService_Process_FullMethodName = "/compute.ComputeService/Process"
)

// ComputeServiceClient is the client API for ComputeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComputeServiceClient interface {
	Greet(ctx context.Context, in *GreetFromClient, opts ...grpc.CallOption) (*GreetFromServer, error)
	Process(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type computeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComputeServiceClient(cc grpc.ClientConnInterface) ComputeServiceClient {
	return &computeServiceClient{cc}
}

func (c *computeServiceClient) Greet(ctx context.Context, in *GreetFromClient, opts ...grpc.CallOption) (*GreetFromServer, error) {
	out := new(GreetFromServer)
	err := c.cc.Invoke(ctx, ComputeService_Greet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *computeServiceClient) Process(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ComputeService_Process_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComputeServiceServer is the server API for ComputeService service.
// All implementations must embed UnimplementedComputeServiceServer
// for forward compatibility
type ComputeServiceServer interface {
	Greet(context.Context, *GreetFromClient) (*GreetFromServer, error)
	Process(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedComputeServiceServer()
}

// UnimplementedComputeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedComputeServiceServer struct {
}

func (UnimplementedComputeServiceServer) Greet(context.Context, *GreetFromClient) (*GreetFromServer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greet not implemented")
}
func (UnimplementedComputeServiceServer) Process(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedComputeServiceServer) mustEmbedUnimplementedComputeServiceServer() {}

// UnsafeComputeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComputeServiceServer will
// result in compilation errors.
type UnsafeComputeServiceServer interface {
	mustEmbedUnimplementedComputeServiceServer()
}

func RegisterComputeServiceServer(s grpc.ServiceRegistrar, srv ComputeServiceServer) {
	s.RegisterService(&ComputeService_ServiceDesc, srv)
}

func _ComputeService_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetFromClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServiceServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputeService_Greet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServiceServer).Greet(ctx, req.(*GreetFromClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _ComputeService_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComputeServiceServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ComputeService_Process_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComputeServiceServer).Process(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ComputeService_ServiceDesc is the grpc.ServiceDesc for ComputeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComputeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "compute.ComputeService",
	HandlerType: (*ComputeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _ComputeService_Greet_Handler,
		},
		{
			MethodName: "Process",
			Handler:    _ComputeService_Process_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compute.proto",
}
